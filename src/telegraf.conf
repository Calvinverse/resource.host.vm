# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  environment = "calvinverse-01"
  os = "windows"
  machinetype = "Hyper-V host"
  consul = "client"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"

  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 1000

  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"

  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Logging configuration:
  ## Run telegraf in debug mode
  debug = false

  ## Run telegraf in quiet mode
  quiet = false

  ## Specify the log file name. The empty string means to log to stdout.
  logfile = "c:/logs/telegraf/telegraf.log"

  ## Override default hostname, if empty use os.Hostname()
  hostname = "silverserver"

  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


# Configuration for influxdb server to send service metrics to the services database
[[outputs.influxdb]]
    # The full HTTP or UDP endpoint URL for your InfluxDB instance.
    # Multiple urls can be specified but it is assumed that they are part of the same
    # cluster, this means that only ONE of the urls will be written to each interval.
    # urls = ["udp://localhost:8089"] # UDP endpoint example
    urls = ["http://http.metrics.service.consulverse:8086"] # required

    # The target database for metrics (telegraf will create it if not exists)
    database = "services" # required

    # Precision of writes, valid values are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    # note: using second precision greatly helps InfluxDB compression
    precision = "s"

    ## Write timeout (for the InfluxDB client), formatted as a string.
    ## If not provided, will default to 5s. 0s means no timeout (not recommended).
    timeout = "5s"

    # username = "telegraf"
    # password = "metricsmetricsmetricsmetrics"

    # Set the user agent for HTTP POSTs (can be useful for log differentiation)
    user_agent = "telegraf"
    # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
    # udp_payload = 512
    [outputs.influxdb.tagpass]
        influxdb_database = ["services"]

# Configuration for influxdb server to send system metrics to the system database
[[outputs.influxdb]]
    # The full HTTP or UDP endpoint URL for your InfluxDB instance.
    # Multiple urls can be specified but it is assumed that they are part of the same
    # cluster, this means that only ONE of the urls will be written to each interval.
    # urls = ["udp://localhost:8089"] # UDP endpoint example
    urls = ["http://http.metrics.service.consulverse:8086"] # required

    # The target database for metrics (telegraf will create it if not exists)
    database = "system" # required

    # Precision of writes, valid values are "ns", "us" (or "µs"), "ms", "s", "m", "h".
    # note: using second precision greatly helps InfluxDB compression
    precision = "s"

    ## Write timeout (for the InfluxDB client), formatted as a string.
    ## If not provided, will default to 5s. 0s means no timeout (not recommended).
    timeout = "5s"

    # username = "telegraf"
    # password = "metricsmetricsmetricsmetrics"

    # Set the user agent for HTTP POSTs (can be useful for log differentiation)
    user_agent = "telegraf"
    # Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
    # udp_payload = 512
    [outputs.influxdb.tagpass]
        influxdb_database = ["system"]


###############################################################################
#                                  INPUTS                                     #
###############################################################################
# Windows Performance Counters plugin.
# These are the recommended method of monitoring system metrics on windows,
# as the regular system plugins (inputs.cpu, inputs.mem, etc.) rely on WMI,
# which utilize more system resources.
#
# See more configuration examples at:
#   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters

[[inputs.win_perf_counters]]
  [inputs.win_perf_counters.tags]
    influxdb_database = "system"

  [[inputs.win_perf_counters.object]]
    # Processor usage, alternative to native, reports on a per core.
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% Processor Time",
      "% DPC Time",
    ]
    Measurement = "win_cpu"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    # Disk times and queues
    ObjectName = "LogicalDisk"
    # We explicitly specify the drives here otherwise we end up getting data for "harddiskvolume1" which is an OS partition that never changes.
    Instances = ["C:","D:","E:","F:","G:","H:","I:","J:","K:","L:","M:","N:","O:"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "Current Disk Queue Length",
      "% Free Space",
      "Free Megabytes",
    ]
    Measurement = "win_disk"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Current Disk Queue Length",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
    ]
    Measurement = "win_diskio"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Network Interface"
    Instances = ["*"]
    Counters = [
      "Bytes Received/sec",
      "Bytes Sent/sec",
      "Packets Received/sec",
      "Packets Sent/sec",
      "Packets Received Discarded",
      "Packets Outbound Discarded",
      "Packets Received Errors",
      "Packets Outbound Errors",
    ]
    Measurement = "win_net"

  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
      "System Up Time",
    ]
    Instances = ["------"]
    Measurement = "win_system"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Memory object.
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes",
    ]
    # Use 6 x - to remove the Instance bit from the query.
    Instances = ["------"]
    Measurement = "win_mem"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Paging File object.
    ObjectName = "Paging File"
    Counters = [
      "% Usage",
    ]
    Instances = ["_Total"]
    Measurement = "win_swap"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Network Interface"
    Instances = ["*"]
    Counters = [
      "Bytes Sent/sec",
      "Bytes Received/sec",
      "Packets Sent/sec",
      "Packets Received/sec",
      "Packets Received Discarded",
      "Packets Received Errors",
      "Packets Outbound Discarded",
      "Packets Outbound Errors",
    ]

  # Monitor Hyper-V in general
  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Virtual Machine Health Summary"
    Instances = ["------"]
    Counters = [
      "Health Ok",
      "Health Critical"
    ]
    Measurement = "hyper_v_vm_health_summary"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Hypervisor"
    Instances = ["------"]
    Counters = [
      "Logical Processors",
      "Virtual Processors",
      "Partitions"
    ]
    Measurement = "hyper_v_hypervisor"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Hypervisor"
    Instances = ["------"]
    Counters = [
      "Total Pages"
    ]
    Measurement = "hyper_v_hypervisor_meta_memory"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  # Monitor processors
  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Hypervisor Logical Processor"
    Instances = ["*"]
    Counters = [
      "% Guest Run Time",
      "% Hypervisor Run Time",
      "% Idle Time",
      "% Total Run Time"
    ]
    Measurement = "hyper_v_hypervisor_logical_processor"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Hypervisor Root Virtual Processor"
    Instances = ["*"]
    Counters = [
      "% Guest Run Time",
      "% Hypervisor Run Time",
      "% Idle Time",
      "% Total Run Time"
    ]
    Measurement = "hyper_v_hypervisor_root_virtual_processor"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Hypervisor Virtual Processor"
    Instances = ["*"]
    Counters = [
      "% Guest Run Time",
      "% Hypervisor Run Time",
      "% Idle Time",
      "% Total Run Time"
    ]
    Measurement = "hyper_v_hypervisor_virtual_processor"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  # Monitor memory
  [[inputs.win_perf_counters.object]]
    # Disk times and queues
    ObjectName = "Hyper-V Dynamic Memory Balancer"
    Instances = [
      "System Balancer"
    ]
    Counters = [
      "Available Memory",
      "Average Pressure",
      "System Current Pressure",
    ]
    Measurement = "hyper_v_dynamic_memory_balancer"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  # Monitor network
  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Virtual Switch"
    Instances = ["*"]
    Counters = [
      "Broadcast Packets Received/sec",
      "Broadcast Packets Sent/sec",
      "Bytes Received/sec",
      "Bytes Send/sec",
      "Disk Writes/sec",
      "Bytes/sec",
      "Directed Packets Received/sec",
      "Directed Packets Send/sec",
      "Dropped Packets Incoming/sec",
      "Dropped Packets Outgoing/sec",
      "Learned Mac Addresses",
      "Learned Mac Addresses/sec",
      "Packets Received/sec",
      "Packets Send/sec",
      "Packets/sec",
      "Purged Mac Addresses",
      "Purged Mac Addresses/sec",
    ]
    Measurement = "hyper_v_virtual_switch"


  # Monitor disks
  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Current Disk Queue Length",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
    ]
    Measurement = "win_diskio"

  [[inputs.win_perf_counters.object]]
    ObjectName = "Hyper-V Virtual Storage Device"
    Instances = ["*"]
    Counters = [
      "Error Count",
      "Flush Count",
      "Read Count",
      "Write Count",
      "Read Bytes/sec",
      "Write Bytes/sec",
    ]
    Measurement = "win_diskio"
